services:
  __SERVICE_NAME__:
    # Express 5 baseline scaffold; run npm run postbump:test after dependency bumps to validate all workspaces.
    # Opt-in via `scripts/compose.sh --profile __SERVICE_NAME__ â€¦` or COMPOSE_PROFILES=__SERVICE_NAME__.
    profiles:
      - __SERVICE_NAME__
    build:
      context: ${MCP_BUILD_CONTEXT:-..}
      dockerfile: ${MCP_DOCKERFILE:-services/__SERVICE_NAME__/Dockerfile}
    env_file:
      - ./services/__SERVICE_NAME__/.env
    environment:
      - MCP_NAME_HUMAN=${__SERVICE_ENV_PREFIX___SERVICE_NAME_HUMAN:-__SERVICE_NAME__ service}
      - MCP_NAME_MODEL=${__SERVICE_ENV_PREFIX___SERVICE_NAME_MODEL:-__SERVICE_NAME__}
      - MCP_DESCRIPTION_HUMAN=${__SERVICE_ENV_PREFIX___SERVICE_DESCRIPTION:-Describe your __SERVICE_NAME__ service}
      - MCP_DESCRIPTION_MODEL=${__SERVICE_ENV_PREFIX___SERVICE_DESCRIPTION:-Describe your __SERVICE_NAME__ service}
    healthcheck:
      test:
        - CMD-SHELL
        - "node -e \"const p = process.env.PORT || 8770; const url = 'http://127.0.0.1:' + p + '/healthz'; fetch(url).then(r => process.exit(r.ok ? 0 : 1)).catch(() => process.exit(1));\""
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '${MCP_CPU_LIMIT:-0.50}'
          memory: ${MCP_MEMORY_LIMIT:-256M}
        reservations:
          memory: ${MCP_MEMORY_RESERVATION:-128M}
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.docker.network=${MCP_NETWORK_EXTERNAL:-traefik}
      - traefik.http.routers.__SERVICE_NAME__.rule=Host(`${MCP_PUBLIC_HOST:-mcp-service.example.com}`)
      - traefik.http.routers.__SERVICE_NAME__.entrypoints=websecure
      - traefik.http.routers.__SERVICE_NAME__.tls=true
      - traefik.http.services.__SERVICE_NAME__.loadbalancer.server.port=${PORT:-8770}

networks:
  proxy:
    external: true
    name: ${MCP_NETWORK_EXTERNAL:-traefik}
